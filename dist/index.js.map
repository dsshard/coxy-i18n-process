{"version":3,"sources":["../src/index.tsx"],"names":["declOfNum","number","titles","cases","hasI18nKey","content","options","key","processI18N","variables","response","textVariables","jsxVariables","acc","variable","reg","testMatch","replaceString","parseExpression","counter","strings","counterData","orderedJSX","a","b","joinedKeys","item","parts","index","isLastItem","nextPart","mergeContent","contents","obj"],"mappings":"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","file":"index.js","sourcesContent":["export type ValueType = string | number | undefined\n\nexport type Options<T, V> = {\n  variables?: Record<string, V>\n  key: keyof T\n}\n\nexport type CreateOptions = {\n  fallback: string\n  language: string\n}\n\nexport function declOfNum(number: number, titles: string[]): string {\n  const cases = [2, 0, 1, 1, 1, 2]\n  return titles[number % 100 > 4 && number % 100 < 20 ? 2 : cases[number % 10 < 5 ? number % 10 : 5]]\n}\n\nexport function hasI18nKey<T>(content: T, options: Options<T, ValueType>): boolean {\n  const { key } = options\n  return !!content[key as string]\n}\n\nexport function processI18N<T, V = ValueType, R = string>(content: T, options: Options<T, V>): R {\n  const { variables, key } = options\n  let response = content[key as string]\n\n  if (!variables) {\n    return response\n  }\n\n  const { textVariables, jsxVariables } = Object.entries(variables).reduce<{\n    textVariables: Record<string, string>\n    jsxVariables: { index: number; key: string; value: V }[]\n  }>(\n    (acc, [key, variable]) => {\n      if (typeof variable === 'object') {\n        acc.jsxVariables.push({\n          index: response.indexOf(key),\n          value: variable,\n          key,\n        })\n      } else {\n        acc.textVariables[key] = String(variable)\n      }\n\n      return acc\n    },\n    { textVariables: {}, jsxVariables: [] },\n  )\n\n  // replace variables\n  for (const variable of Object.keys(textVariables)) {\n    const reg = new RegExp(`{{${variable}}}`, 'g')\n    response = response.replace(reg, textVariables[variable])\n  }\n\n  // for declOfNum\n  const testMatch = response.match(/(\\[.+])/) // find [number|item1|item2|item3]\n\n  if (testMatch?.[0]) {\n    const replaceString = testMatch[0]\n    const parseExpression = replaceString.match(/\\[(.+)]/) // find number|item1|item2|item3\n\n    if (parseExpression?.[1] && parseExpression[1].indexOf('|') > -1) {\n      const [counter, ...strings] = parseExpression[1].split('|') // to number, item1, item2, item3\n\n      if (strings?.length > 0) {\n        const counterData = Number(counter)\n        response = response.replace(replaceString, declOfNum(counterData, strings))\n      }\n    }\n  }\n\n  const orderedJSX = jsxVariables.sort((a, b) => a.index - b.index)\n\n  if (orderedJSX.length) {\n    const joinedKeys = orderedJSX.map((item) => `{{${item.key}}}`).join('|')\n    const parts = response.split(new RegExp(joinedKeys, 'g'))\n\n    return orderedJSX.reduce<V[]>((acc, variable, index) => {\n      acc.push(parts[index] as never)\n      acc.push(variable.value as never)\n\n      const isLastItem = index === orderedJSX.length - 1\n      const nextPart = parts[index + 1]\n\n      if (isLastItem && nextPart) {\n        acc.push(nextPart as never)\n      }\n\n      return acc\n    }, []) as never\n  }\n\n  return response\n}\n\nexport function mergeContent<T>(contents: Array<T>, options: CreateOptions): T[keyof T] {\n  const response = {} as T[keyof T]\n\n  for (const obj of contents) {\n    Object.assign(response, obj[options.fallback] || {}, obj[options.language] || {})\n  }\n  return response\n}\n"]}