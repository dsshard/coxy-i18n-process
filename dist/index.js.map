{"version":3,"sources":["../src/index.tsx"],"names":["declOfNum","number","titles","cases","hasI18nKey","content","options","key","processI18N","variables","response","variable","reg","testMatch","replaceString","parseExpression","counter","strings","counterData","mergeContent","contents","obj"],"mappings":"aAYO,SAASA,CAAAA,CAAUC,EAAgBC,CAA0B,CAAA,CAClE,IAAMC,CAAQ,CAAA,CAAC,EAAG,CAAG,CAAA,CAAA,CAAG,EAAG,CAAG,CAAA,CAAC,EAC/B,OAAOD,CAAAA,CAAOD,EAAS,GAAM,CAAA,CAAA,EAAKA,CAAS,CAAA,GAAA,CAAM,EAAK,CAAA,CAAA,CAAIE,EAAMF,CAAS,CAAA,EAAA,CAAK,EAAIA,CAAS,CAAA,EAAA,CAAK,CAAC,CAAC,CACpG,CAEO,SAASG,CAAAA,CAAcC,EAAYC,CAA8B,CAAA,CACtE,GAAM,CAAE,GAAA,CAAAC,CAAI,CAAID,CAAAA,CAAAA,CAChB,OAAO,CAAC,CAACD,CAAAA,CAAQE,CAAa,CAChC,CAEO,SAASC,CAAeH,CAAAA,CAAAA,CAAYC,EAA6B,CACtE,GAAM,CAAE,SAAAG,CAAAA,CAAAA,CAAW,IAAAF,CAAI,CAAA,CAAID,EACvBI,CAAWL,CAAAA,CAAAA,CAAQE,CAAa,CAEpC,CAAA,GAAI,CAACE,CAAAA,CACH,OAAOC,CAAAA,CAIT,QAAWC,CAAY,IAAA,MAAA,CAAO,KAAKF,CAAS,CAAA,CAAG,CAC7C,IAAMG,CAAAA,CAAM,IAAI,MAAA,CAAO,CAAKD,EAAAA,EAAAA,CAAQ,KAAM,GAAG,CAAA,CAC7CD,EAAWA,CAAS,CAAA,OAAA,CAAQE,EAAK,MAAOH,CAAAA,CAAAA,CAAUE,CAAQ,CAAC,CAAC,EAC9D,CAGA,IAAME,CAAAA,CAAYH,EAAS,KAAM,CAAA,SAAS,EAC1C,GAAIG,CAAAA,GAAY,CAAC,CAAG,CAAA,CAClB,IAAMC,CAAgBD,CAAAA,CAAAA,CAAU,CAAC,CAC3BE,CAAAA,CAAAA,CAAkBD,EAAc,KAAM,CAAA,SAAS,CAErD,CAAA,GAAIC,CAAkB,GAAA,CAAC,GAAKA,CAAgB,CAAA,CAAC,EAAE,OAAQ,CAAA,GAAG,EAAI,EAAI,CAAA,CAChE,GAAM,CAACC,CAAS,CAAA,GAAGC,CAAO,CAAIF,CAAAA,CAAAA,CAAgB,CAAC,CAAE,CAAA,KAAA,CAAM,GAAG,CAC1D,CAAA,GAAIE,CAAS,EAAA,MAAA,CAAS,CAAG,CAAA,CACvB,IAAMC,CAAc,CAAA,MAAA,CAAOF,CAAO,CAClCN,CAAAA,CAAAA,CAAWA,EAAS,OAAQI,CAAAA,CAAAA,CAAed,EAAUkB,CAAaD,CAAAA,CAAO,CAAC,EAC5E,CACF,CACF,CAEA,OAAOP,CACT,CAEO,SAASS,CAAgBC,CAAAA,CAAAA,CAAoBd,CAAoC,CAAA,CACtF,IAAMI,CAAW,CAAA,GAEjB,IAAWW,IAAAA,CAAAA,IAAOD,EAChB,MAAO,CAAA,MAAA,CAAOV,CAAUW,CAAAA,CAAAA,CAAIf,CAAQ,CAAA,QAAQ,GAAK,EAAC,CAAGe,EAAIf,CAAQ,CAAA,QAAQ,GAAK,EAAE,CAElF,CAAA,OAAOI,CACT","file":"index.js","sourcesContent":["type ParamValues = Record<string, string | number | undefined>\n\ntype Options<T> = {\n  variables?: ParamValues\n  key: keyof T\n}\n\ntype CreateOptions = {\n  fallback: string\n  language: string\n}\n\nexport function declOfNum(number: number, titles: string[]): string {\n  const cases = [2, 0, 1, 1, 1, 2]\n  return titles[number % 100 > 4 && number % 100 < 20 ? 2 : cases[number % 10 < 5 ? number % 10 : 5]]\n}\n\nexport function hasI18nKey<T>(content: T, options: Options<T>): boolean {\n  const { key } = options\n  return !!content[key as string]\n}\n\nexport function processI18N<T>(content: T, options: Options<T>): string {\n  const { variables, key } = options\n  let response = content[key as string]\n\n  if (!variables) {\n    return response\n  }\n\n  // replace variables\n  for (const variable of Object.keys(variables)) {\n    const reg = new RegExp(`{{${variable}}}`, 'g')\n    response = response.replace(reg, String(variables[variable]))\n  }\n\n  // for declOfNum\n  const testMatch = response.match(/(\\[.+])/) // find [number|item1|item2|item3]\n  if (testMatch?.[0]) {\n    const replaceString = testMatch[0]\n    const parseExpression = replaceString.match(/\\[(.+)]/) // find number|item1|item2|item3\n\n    if (parseExpression?.[1] && parseExpression[1].indexOf('|') > -1) {\n      const [counter, ...strings] = parseExpression[1].split('|') // to number, item1, item2, item3\n      if (strings?.length > 0) {\n        const counterData = Number(counter)\n        response = response.replace(replaceString, declOfNum(counterData, strings))\n      }\n    }\n  }\n\n  return response\n}\n\nexport function mergeContent<T>(contents: Array<T>, options: CreateOptions): T[keyof T] {\n  const response = {} as T[keyof T]\n\n  for (const obj of contents) {\n    Object.assign(response, obj[options.fallback] || {}, obj[options.language] || {})\n  }\n  return response\n}\n"]}