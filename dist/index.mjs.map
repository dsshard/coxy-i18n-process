{"version":3,"sources":["../src/index.tsx"],"names":["declOfNum","number","titles","cases","hasI18nKey","content","options","key","processI18N","variables","response","textVariables","jsxVariables","acc","variable","reg","testMatch","replaceString","parseExpression","counter","strings","counterData","orderedJSX","a","b","joinedKeys","item","parts","index","mergeContent","contents","obj"],"mappings":"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","file":"index.mjs","sourcesContent":["export type ValueType = string | number | undefined\n\nexport type Options<T, V> = {\n  variables?: Record<string, V>\n  key: keyof T\n}\n\nexport type CreateOptions = {\n  fallback: string\n  language: string\n}\n\nexport function declOfNum(number: number, titles: string[]): string {\n  const cases = [2, 0, 1, 1, 1, 2]\n  return titles[number % 100 > 4 && number % 100 < 20 ? 2 : cases[number % 10 < 5 ? number % 10 : 5]]\n}\n\nexport function hasI18nKey<T>(content: T, options: Options<T, ValueType>): boolean {\n  const { key } = options\n  return !!content[key as string]\n}\n\nexport function processI18N<T, V = ValueType, R = string>(content: T, options: Options<T, V>): R {\n  const { variables, key } = options\n  let response = content[key as string]\n\n  if (!variables) {\n    return response\n  }\n\n  const { textVariables, jsxVariables } = Object.entries(variables).reduce<{\n    textVariables: Record<string, string>\n    jsxVariables: { index: number; key: string; value: V }[]\n  }>(\n    (acc, [key, variable]) => {\n      if (typeof variable === 'object') {\n        acc.jsxVariables.push({\n          index: response.indexOf(key),\n          value: variable,\n          key,\n        })\n      } else {\n        acc.textVariables[key] = String(variable)\n      }\n\n      return acc\n    },\n    { textVariables: {}, jsxVariables: [] },\n  )\n\n  // replace variables\n  for (const variable of Object.keys(textVariables)) {\n    const reg = new RegExp(`{{${variable}}}`, 'g')\n    response = response.replace(reg, textVariables[variable])\n  }\n\n  // for declOfNum\n  const testMatch = response.match(/(\\[.+])/) // find [number|item1|item2|item3]\n\n  if (testMatch?.[0]) {\n    const replaceString = testMatch[0]\n    const parseExpression = replaceString.match(/\\[(.+)]/) // find number|item1|item2|item3\n\n    if (parseExpression?.[1] && parseExpression[1].indexOf('|') > -1) {\n      const [counter, ...strings] = parseExpression[1].split('|') // to number, item1, item2, item3\n\n      if (strings?.length > 0) {\n        const counterData = Number(counter)\n        response = response.replace(replaceString, declOfNum(counterData, strings))\n      }\n    }\n  }\n\n  const orderedJSX = jsxVariables.sort((a, b) => a.index - b.index)\n\n  if (orderedJSX.length) {\n    const joinedKeys = orderedJSX.map((item) => `{{${item.key}}}`).join('|')\n    const parts = response.split(new RegExp(joinedKeys, 'g'))\n\n    return orderedJSX.reduce<V[]>((acc, variable, index) => {\n      acc.push(parts[index] as never)\n      acc.push(variable.value as never)\n\n      return acc\n    }, []) as never\n  }\n\n  return response\n}\n\nexport function mergeContent<T>(contents: Array<T>, options: CreateOptions): T[keyof T] {\n  const response = {} as T[keyof T]\n\n  for (const obj of contents) {\n    Object.assign(response, obj[options.fallback] || {}, obj[options.language] || {})\n  }\n  return response\n}\n"]}